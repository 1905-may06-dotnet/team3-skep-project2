// <auto-generated />
using System;
using Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DBcontext))]
    [Migration("20190613214357_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Models.BGLocation", b =>
                {
                    b.Property<int>("LID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("LocationName");

                    b.Property<string>("State");

                    b.HasKey("LID");

                    b.ToTable("BGLocation");
                });

            modelBuilder.Entity("Data.Models.BGUser", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowEN");

                    b.Property<bool>("AllowPN");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int?>("LocationLID");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UID");

                    b.HasIndex("LocationLID");

                    b.ToTable("BGUser");
                });

            modelBuilder.Entity("Data.Models.BoardGame", b =>
                {
                    b.Property<int>("GID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BGName");

                    b.Property<int>("MaxPlayerCount");

                    b.Property<int>("MinPlayerCount");

                    b.Property<string>("genre");

                    b.HasKey("GID");

                    b.HasIndex("genre");

                    b.ToTable("BoardGame");
                });

            modelBuilder.Entity("Data.Models.Friend", b =>
                {
                    b.Property<int>("FID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGUserUID");

                    b.HasKey("FID");

                    b.HasIndex("BGUserUID");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("Data.Models.FriendInvitation", b =>
                {
                    b.Property<int>("FIID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGUserUID");

                    b.Property<int?>("BGUserUID1");

                    b.HasKey("FIID");

                    b.HasIndex("BGUserUID");

                    b.HasIndex("BGUserUID1");

                    b.ToTable("FriendInvitation");
                });

            modelBuilder.Entity("Data.Models.Genres", b =>
                {
                    b.Property<string>("Genre")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Genre");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Data.Models.Meeting", b =>
                {
                    b.Property<int>("MID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGLocationLID");

                    b.Property<int?>("BGUserUID");

                    b.Property<int?>("BoardGameGID");

                    b.Property<DateTime>("MeetingTime");

                    b.HasKey("MID");

                    b.HasIndex("BGLocationLID");

                    b.HasIndex("BGUserUID");

                    b.HasIndex("BoardGameGID");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("Data.Models.MeetingInvitation", b =>
                {
                    b.Property<int>("MIID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGUserUID");

                    b.Property<int?>("BGUserUID1");

                    b.Property<int?>("MeetingMID");

                    b.HasKey("MIID");

                    b.HasIndex("BGUserUID");

                    b.HasIndex("BGUserUID1");

                    b.HasIndex("MeetingMID");

                    b.ToTable("MeetingInvitation");
                });

            modelBuilder.Entity("Data.Models.MeetingRequest", b =>
                {
                    b.Property<int>("MRID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGLocationLID");

                    b.Property<int?>("BGUserUID");

                    b.Property<int?>("BGUserUID1");

                    b.Property<int?>("BoardGameGID");

                    b.Property<DateTime>("MeetingTime");

                    b.HasKey("MRID");

                    b.HasIndex("BGLocationLID");

                    b.HasIndex("BGUserUID");

                    b.HasIndex("BGUserUID1");

                    b.HasIndex("BoardGameGID");

                    b.ToTable("MeetingRequest");
                });

            modelBuilder.Entity("Data.Models.Rating", b =>
                {
                    b.Property<int>("RID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGUserUID");

                    b.Property<int?>("MeetingMID");

                    b.Property<int>("UserRating");

                    b.HasKey("RID");

                    b.HasIndex("BGUserUID");

                    b.HasIndex("MeetingMID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Data.Models.UserCollection", b =>
                {
                    b.Property<int>("UCID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGUserUID");

                    b.Property<int?>("BoardGameGID");

                    b.HasKey("UCID");

                    b.HasIndex("BGUserUID");

                    b.HasIndex("BoardGameGID");

                    b.ToTable("UserCollection");
                });

            modelBuilder.Entity("Data.Models.UserMeeting", b =>
                {
                    b.Property<int>("UMID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BGUserUID");

                    b.Property<int?>("MeetingMID");

                    b.HasKey("UMID");

                    b.HasIndex("BGUserUID");

                    b.HasIndex("MeetingMID");

                    b.ToTable("UserMeeting");
                });

            modelBuilder.Entity("Data.Models.BGUser", b =>
                {
                    b.HasOne("Data.Models.BGLocation", "Location")
                        .WithMany("UserList")
                        .HasForeignKey("LocationLID");
                });

            modelBuilder.Entity("Data.Models.BoardGame", b =>
                {
                    b.HasOne("Data.Models.Genres", "Genre")
                        .WithMany()
                        .HasForeignKey("genre");
                });

            modelBuilder.Entity("Data.Models.Friend", b =>
                {
                    b.HasOne("Data.Models.BGUser")
                        .WithMany("Friends")
                        .HasForeignKey("BGUserUID");
                });

            modelBuilder.Entity("Data.Models.FriendInvitation", b =>
                {
                    b.HasOne("Data.Models.BGUser")
                        .WithMany("FriendInvitationsAsReceiver")
                        .HasForeignKey("BGUserUID");

                    b.HasOne("Data.Models.BGUser")
                        .WithMany("FriendInvitationsAsSender")
                        .HasForeignKey("BGUserUID1");
                });

            modelBuilder.Entity("Data.Models.Meeting", b =>
                {
                    b.HasOne("Data.Models.BGLocation")
                        .WithMany("MeetingList")
                        .HasForeignKey("BGLocationLID");

                    b.HasOne("Data.Models.BGUser")
                        .WithMany("MeetingsHost")
                        .HasForeignKey("BGUserUID");

                    b.HasOne("Data.Models.BoardGame")
                        .WithMany("Meetings")
                        .HasForeignKey("BoardGameGID");
                });

            modelBuilder.Entity("Data.Models.MeetingInvitation", b =>
                {
                    b.HasOne("Data.Models.BGUser")
                        .WithMany("MeetingInvitationsAsReceiver")
                        .HasForeignKey("BGUserUID");

                    b.HasOne("Data.Models.BGUser")
                        .WithMany("MeetingInvitationsAsSender")
                        .HasForeignKey("BGUserUID1");

                    b.HasOne("Data.Models.Meeting")
                        .WithMany("MeetingInvitation")
                        .HasForeignKey("MeetingMID");
                });

            modelBuilder.Entity("Data.Models.MeetingRequest", b =>
                {
                    b.HasOne("Data.Models.BGLocation")
                        .WithMany("MeetingRequestList")
                        .HasForeignKey("BGLocationLID");

                    b.HasOne("Data.Models.BGUser")
                        .WithMany("MeetingRequestsAsReceiver")
                        .HasForeignKey("BGUserUID");

                    b.HasOne("Data.Models.BGUser")
                        .WithMany("MeetingRequestsAsSender")
                        .HasForeignKey("BGUserUID1");

                    b.HasOne("Data.Models.BoardGame")
                        .WithMany("MeetingRequestList")
                        .HasForeignKey("BoardGameGID");
                });

            modelBuilder.Entity("Data.Models.Rating", b =>
                {
                    b.HasOne("Data.Models.BGUser")
                        .WithMany("Ratings")
                        .HasForeignKey("BGUserUID");

                    b.HasOne("Data.Models.Meeting")
                        .WithMany("RatingList")
                        .HasForeignKey("MeetingMID");
                });

            modelBuilder.Entity("Data.Models.UserCollection", b =>
                {
                    b.HasOne("Data.Models.BGUser")
                        .WithMany("UserCollections")
                        .HasForeignKey("BGUserUID");

                    b.HasOne("Data.Models.BoardGame")
                        .WithMany("UserCollections")
                        .HasForeignKey("BoardGameGID");
                });

            modelBuilder.Entity("Data.Models.UserMeeting", b =>
                {
                    b.HasOne("Data.Models.BGUser")
                        .WithMany("UserMeetings")
                        .HasForeignKey("BGUserUID");

                    b.HasOne("Data.Models.Meeting")
                        .WithMany("UserMeetings")
                        .HasForeignKey("MeetingMID");
                });
#pragma warning restore 612, 618
        }
    }
}
